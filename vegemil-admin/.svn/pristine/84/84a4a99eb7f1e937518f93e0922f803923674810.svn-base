package com.vegemil.controller;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.vegemil.adapter.GsonLocalDateTimeAdapter;
import com.vegemil.constant.Method;
import com.vegemil.domain.AdminDTO;
import com.vegemil.domain.BabyDTO;
import com.vegemil.domain.CalendarModelDTO;
import com.vegemil.domain.CsDTO;
import com.vegemil.domain.RecruitDTO;
import com.vegemil.service.AdminRecruitService;
import com.vegemil.util.UiUtils;

@Controller
public class AdminRecruitController extends UiUtils {
	@Autowired
	private AdminRecruitService adminRecruitService;
	
	@RequestMapping(value = "/admin/recruit/{viewName}")
    public String adminRecruit(@PathVariable(value = "viewName", required = false) String viewName, HttpServletRequest req, Model model)throws Exception{
		return "admin/recruit/"+viewName;
    }
	
	@RequestMapping(value = "/admin/recruit/recruitIndex")
    public String adminRecruitIndex(@RequestParam(value = "sTh", required = false) String sTh, HttpServletRequest req, Model model)throws Exception{
		List<RecruitDTO> recruitList = adminRecruitService.getRecruitList();
		
		if(sTh == null) sTh = recruitList.get(0).getSTh();
		
		model.addAttribute("sTh", sTh);
		model.addAttribute("recruitList", recruitList);
		model.addAttribute("volunteerdata", adminRecruitService.getVolunteerData(sTh));
		model.addAttribute("dateapplydata", adminRecruitService.getDateApplyData(sTh));
		model.addAttribute("fielddata", adminRecruitService.getFieldData(sTh));
		
		return "admin/recruit/recruitIndex";
    }
	/*
	@GetMapping(value = "/admin/recruit/noticeList")
	public String adminRecruitAdd(@RequestParam(value = "sTh", required = false) String sTh, HttpServletRequest req, Model model) {
		List<RecruitDTO> recruitList = adminRecruitService.getRecruitList();
		
		model.addAttribute("recruitList", recruitList);
		return "admin/recruit/noticeList";
	}
	*/
	
	@GetMapping(value = "/admin/recruit/noticeAdd")
	public String adminRecruitAdd(@RequestParam(value = "sTh", required = false) String sTh, HttpServletResponse res, HttpServletRequest req, Model model) {
		RecruitDTO recruit = new RecruitDTO();
		
		recruit.setSTh("");
		recruit.setSTitle("");
		recruit.setSCompany("");
		recruit.setSType("");
		recruit.setSStartdate("");
		recruit.setSEnddate("");
		recruit.setS1("");
		recruit.setS2("");
		recruit.setS3("");
		recruit.setSClose("");
		recruit.setSCategory("");
		recruit.setSCategory2("");
		recruit.setSCollect("");
		
		if(sTh != null) recruit = adminRecruitService.getRecruit(sTh);
		
		model.addAttribute("recruit", recruit);
		return "admin/recruit/noticeAdd";
	}
	
	@RequestMapping(value = "/admin/recruit/noticeList/table", method = {RequestMethod.GET, RequestMethod.POST})
	 public @ResponseBody JsonObject getNoticeList(@ModelAttribute("params") RecruitDTO params, Model model) {

		JsonObject jsonObj = new JsonObject();
		List<RecruitDTO> noticeList = adminRecruitService.getRecruitList();
		if (CollectionUtils.isEmpty(noticeList) == false) {
			Gson gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new GsonLocalDateTimeAdapter()).create();
			JsonArray jsonArr = gson.toJsonTree(noticeList).getAsJsonArray();
			jsonObj.add("data", jsonArr);
		}

		return jsonObj;
	 }
	
	
	@PostMapping("/admin/recruit/noticeRegister")
    public String adminRecruitNoticeRegister(@ModelAttribute("params") RecruitDTO params, Model model, HttpServletResponse response, HttpServletRequest request) {
    	try {
	    	boolean isRegistered = adminRecruitService.registerRecruitNotice(params);
			if (isRegistered == false) {
				return showMessageWithRedirect("채용공고 등록에 실패하였습니다.", "/admin/recruit/noticeAdd", Method.GET, null, model);
			}
    	} catch (DataAccessException e) {
			return showMessageWithRedirect("데이터베이스 처리 과정에 문제가 발생하였습니다.", "/admin/recruit/noticeAdd", Method.GET, null, model);
		} catch (Exception e) {
			return showMessageWithRedirect("시스템에 문제가 발생하였습니다.", "/admin/recruit/noticeAdd", Method.GET, null, model);
		}
    	return showMessageWithRedirect("채용공고 등록이 완료되었습니다.\n 채용공고 리스트로 이동 합니다.", "/admin/recruit/noticeList", Method.GET, null, model);
    }

	@RequestMapping("/admin/recruit/noticeCopy")
    public @ResponseBody String adminRecruitNoticeCopy(@ModelAttribute("params") RecruitDTO params, Model model, HttpServletResponse response, HttpServletRequest request) {
    	try {
	    	boolean isRegistered = adminRecruitService.registerRecruitCopy(params);
			if (isRegistered == false) {
				return "false";
			}
    	} catch (DataAccessException e) {
    		return "false";
		} catch (Exception e) {
			return "false";
		}
    	return "success";
    }
	
	@RequestMapping(value = "/admin/recruit/volunteerList")
    public String adminRecruitVolunteer(@RequestParam(value = "sTh", required = false) String sTh, HttpServletRequest req, Model model)throws Exception{
		List<RecruitDTO> recruitList = adminRecruitService.getRecruitList();
		
		if(sTh == null) sTh = recruitList.get(0).getSTh();
		
		model.addAttribute("sTh", sTh);
		model.addAttribute("recruitList", recruitList);
		
		return "admin/recruit/volunteerList";
    }
	
	@RequestMapping(value = "/admin/recruit/volunteerList/table", method = {RequestMethod.GET, RequestMethod.POST})
	 public @ResponseBody JsonObject getVolunteerList(@ModelAttribute("params") RecruitDTO params, Model model) {

		JsonObject jsonObj = new JsonObject();
		List<RecruitDTO> volunteerList = adminRecruitService.getVolunteerList(params);
		if (CollectionUtils.isEmpty(volunteerList) == false) {
			Gson gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new GsonLocalDateTimeAdapter()).create();
			JsonArray jsonArr = gson.toJsonTree(volunteerList).getAsJsonArray();
			jsonObj.add("data", jsonArr);
		}

		return jsonObj;
	 }
}
